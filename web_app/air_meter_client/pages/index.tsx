import Head from 'next/head';
import React, {useEffect, useMemo, useState} from 'react';
import {useRecoilValue} from 'recoil';
import {
    earliestReadTime,
    publisherList,
    readingCursorSet,
    readingRangesList,
    useSensorReadingsAPI,
    latestReadout,
} from '../lib/state/sensors';
import RelayWS from '../lib/WebSocket';
import styles from '../styles/Home.module.css';

const isProd = process.env.NODE_ENV === 'production';

function Subscribe({deviceId}: {deviceId: number}) {
    return (
        <button
            onClick={() => RelayWS.sendJoin(deviceId)}
            className="px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-blue-600 rounded-md dark:bg-gray-800 hover:bg-blue-500 dark:hover:bg-gray-700 focus:outline-none focus:bg-blue-500 dark:focus:bg-gray-700"
        >
            Subscribe
        </button>
    );
}

function LoadMore({pubId, limit}: {pubId: number; limit: number}) {
    const loadMore = useSensorReadingsAPI();
    return (
        <button
            onClick={() => loadMore({pubId, limit})}
            className="px-4 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-200 transform bg-blue-600 rounded-md dark:bg-gray-800 hover:bg-blue-500 dark:hover:bg-gray-700 focus:outline-none focus:bg-blue-500 dark:focus:bg-gray-700"
        >
            Load More
        </button>
    );
}

function ReadingRange({
    cursor,
    rev,
}: {
    cursor: string;
    rev?: boolean;
}): JSX.Element {
    const data = useRecoilValue(readingRangesList(cursor));
    if (!data || data.length < 1) return <div>{cursor}: No Data</div>;
    return (
        <div>
            <div>cursor: {cursor}</div>
            {data.reduce(
                (acc, read) => [
                    ...(!rev ? acc : []),
                    <div key={read.read_time}>{JSON.stringify(read)}</div>,
                    ...(rev ? acc : []),
                ],
                [] as JSX.Element[]
            )}
        </div>
    );
}

function Timeline({pubId}: {pubId: number}) {
    const cursors = useRecoilValue(readingCursorSet(pubId));
    const segmentMap = useMemo(() => {
        const segments = [] as JSX.Element[];
        cursors.forEach((cursor) => {
            console.log(cursor);
            segments.push(<ReadingRange key={cursor} cursor={cursor} rev />);
        });
        return segments;
    }, [cursors]);
    return <div>{segmentMap}</div>;
}

function Readout({
    deviceId,
    setData,
}: {
    deviceId: number;
    setData: (b: boolean) => void;
}) {
    const data = useRecoilValue(latestReadout(deviceId));
    useEffect(() => {
        if (data) setData(true);
    }, [data, setData]);
    return <div>{JSON.stringify(data)}</div>;
}

function DeviceCard({deviceId}: {deviceId: number}) {
    const [hasData, setData] = useState(false);
    return (
        <div className={styles.grid}>
            <h2>Id: {deviceId}</h2>
            <Readout deviceId={deviceId} setData={setData} />
            {hasData && (
                <>
                    <Timeline pubId={deviceId} />
                    <LoadMore pubId={deviceId} limit={30} />
                </>
            )}

            {!hasData && <Subscribe deviceId={deviceId} />}
        </div>
    );
}

function DeviceGrid() {
    const list = useRecoilValue(publisherList);
    return (
        <>
            {list.map((id) => (
                <DeviceCard key={id} deviceId={id} />
            ))}
        </>
    );
}

export default function Home() {
    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link
                    rel="icon"
                    href={`${isProd ? '/static' : ''}/favicon.ico`}
                />
            </Head>

            <main className={styles.main}>
                <h2>Devices</h2>
                <div className={styles.grid}>
                    <DeviceGrid />
                    <br />
                </div>
            </main>

            <footer className={styles.footer}>
                <a
                    href="http://memes"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Powered by{' '}
                    <span className={styles.logo}>
                        <img
                            src="/amogus.jpg"
                            alt="Memes"
                            width={30}
                            height={30}
                        />
                    </span>
                </a>
            </footer>
        </div>
    );
}
